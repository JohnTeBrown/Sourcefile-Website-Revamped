export { $DEVCOMP, $PROXY, $TRACK, batch, children, createComputed, createContext, createDeferred, createEffect, createMemo, createReaction, createRenderEffect, createResource, createRoot, createSelector, createSignal, enableExternalSource, enableScheduling, equalFn, getListener, getOwner, on, onCleanup, onError, catchError, onMount, runWithOwner, startTransition, untrack, useContext, useTransition } from "solid-js/types/reactive/signal.js";
export type { Accessor, AccessorArray, ChildrenReturn, Context, EffectFunction, EffectOptions, InitializedResource, InitializedResourceOptions, InitializedResourceReturn, MemoOptions, NoInfer, OnEffectFunction, OnOptions, Owner, Resource, ResourceActions, ResourceFetcher, ResourceFetcherInfo, ResourceOptions, ResourceReturn, ResourceSource, ReturnTypes, Setter, Signal, SignalOptions } from "solid-js/types/reactive/signal.js";
export * from "solid-js/types/reactive/observable.js";
export * from "solid-js/types/reactive/scheduler.js";
export * from "solid-js/types/reactive/array.js";
export * from "solid-js/types/render/index.js";
import type { JSX } from "solid-js/types/jsx.js";
type JSXElement = JSX.Element;
export type { JSXElement, JSX };
import { registerGraph, writeSignal } from "solid-js/types/reactive/signal.js";
export declare const DEV: {
    readonly hooks: {
        afterUpdate: (() => void) | null;
        afterCreateOwner: ((owner: import("solid-js/types/reactive/signal.js").Owner) => void) | null;
    };
    readonly writeSignal: typeof writeSignal;
    readonly registerGraph: typeof registerGraph;
} | undefined;
declare global {
    var Solid$$: boolean;
}
